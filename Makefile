GHC = ghc -O3

AWK = gawk -i inplace -f

CANTERBURY := alice29.txt asyoulik.txt cp.html fields.c grammar.lsp kennedy.xls lcet10.txt plrabn12.txt ptt5 sum xargs.1

# zipped test files generated by gzip
CANTERBURYGZ := $(foreach Y,$(CANTERBURY),$(Y).gz)
$(CANTERBURYGZ): $(@:.gz=)
	gzip -k $(@:.gz=)

# zipped test files generated by our algorithm
CANTERBURYMYGZ := $(foreach Y,$(CANTERBURY),$(Y).my.gz)

# compression benchmarks
CBENCHMARKS := NoRBR ExpList HsMap DiffStack LinArray HsFunctional HsImperative 
XBENCHMARKS := $(foreach X,$(XBENCHMARKS_), $(foreach Y,$(CANTERBURY),$X-$Y))

# all benchmarks
BENCHMARKS += $(CANTERBURYMYGZ) $(XBENCHMARKS)

ExpList.o : ExpList.hs Test.awk Extraction.o
	$(GHC) -c ExpList.hs

ExpListMain : ExpListMain.hs ExpList.o Extraction.o DecompressHelper.o
	$(GHC) ExpListMain.hs

DiffStack.o : DiffStack.hs Test.awk Extraction.o DiffStackT.o
	$(GHC) -c DiffStack.hs

DiffStackT.o : DiffStackT.hs
	$(GHC) -c DiffStackT.hs

DiffStackMain : DiffStackMain.hs DiffStack.o Extraction.o DecompressHelper.o
	$(GHC) DiffStackMain.hs

NoRBR.o : NoRBR.hs Extraction.o DecompressHelper.o
	$(GHC) -c NoRBR.hs

NoRBRMain : NoRBRMain.hs NoRBR.o Extraction.o DecompressHelper.o
	$(GHC) NoRBRMain.hs

EffAlg : EffAlg.hs NoRBR.o Extraction.o DecompressHelper.o
	$(GHC) EffAlg.hs

CompressMain : CompressMain.hs Compress.hs
	$(GHC) CompressMain.hs

benchmark : benchmark.hs
	$(GHC) benchmark.hs

COMPRESS := $(foreach Y,$(CANTERBURY),Compress-$Y)
.SECONDEXPANSION:
$(COMPRESS) : CompressMain benchmark $$(word 2,$$(subst -, ,$$@))
	./benchmark ./benchs.db ./CompressMain $(word 2,$(subst -, ,$@)) $(word 2,$(subst -, ,$@)).my.gz

NORBR := $(foreach Y,$(CANTERBURYGZ),NoRBR-$Y)

.SECONDEXPANSION:
$(NORBR) : NoRBRMain benchmark $$(word 2,$$(subst -, ,$$@))
	./benchmark ./benchs.db ./NoRBRMain $(word 2,$(subst -, ,$@))

EXPLIST := $(foreach Y,$(CANTERBURYGZ),ExpList-$Y)

.SECONDEXPANSION:
$(EXPLIST) : ExpListMain benchmark $$(word 2,$$(subst -, ,$$@))
	./benchmark ./benchs.db ./ExpListMain $(word 2,$(subst -, ,$@)) /dev/null

DIFFSTACK := $(foreach Y,$(CANTERBURYGZ),DiffStack-$Y)
.SECONDEXPANSION:
$(DIFFSTACK) : DiffStackMain benchmark $$(word 2,$$(subst -, ,$$@))
	./benchmark ./benchs.db ./DiffStackMain $(word 2,$(subst -, ,$@)) /dev/null

EFFALG := $(foreach Y,$(CANTERBURYGZ),EffAlg-$Y)
.SECONDEXPANSION:
$(EFFALG) : EffAlg benchmark $$(word 2,$$(subst -, ,$$@))
	./benchmark ./benchs.db ./EffAlg $(word 2,$(subst -, ,$@)) /dev/null

EffAlg2 : $(EFFALG)

ExpList : $(EXPLIST)

NoRBR: $(NORBR)

DiffStack : $(DIFFSTACK)

Compress : $(COMPRESS)

DecompressHelper.o : DecompressHelper.hs Extraction.o
	$(GHC) -c DecompressHelper.hs

clean:
	rm -f *.vo *~ *.glob \#* Test.hs *.o TestCases *.hi *.gz \
	   NoRBR.hs NoRBR.hs.tmp NoRBRMain benchs.db benchmark

#tests
A = 1 2 3
B = a b c
C = $(foreach X,$(A),$(foreach Y,$(B),$X-$Y))

a:
	echo A

b:
	echo B

$(C) : ${word 2,${subst -, ,$@}}
	echo $@ ${word 2,${subst -, ,$@}}

include coqfiles.mak

# rules excluded from coqfiles.mak
ExpList.vo ExpList.hs: ExpList.v EncodingRelation.vo EncodingRelationProperties.vo Shorthand.vo Backreferences.vo Combi.vo StrongDec.vo Extraction.vo 
	coqc ExpList.v
	$(AWK) Test.awk ExpList.hs

DiffStack.vo DiffStack.hs: DiffStack.v EncodingRelation.vo EncodingRelationProperties.vo Shorthand.vo Backreferences.vo Combi.vo StrongDec.vo Extraction.vo 
	coqc DiffStack.v
	$(AWK) DiffStack.awk DiffStack.hs

NoRBR.vo NoRBR.hs: NoRBR.v Shorthand.vo Backreferences.vo EncodingRelationProperties.vo Extraction.vo 
	coqc NoRBR.v
	$(AWK) Test.awk NoRBR.hs

Compress.vo Compress.hs: Compress.v HashTable.vo Intervals.vo Prefix.vo Shorthand.vo Backreferences.vo EncodingRelation.vo LSB.vo Combi.vo DeflateCoding.vo EncodingRelationProperties.vo 
	coqc Compress.v
	$(AWK) Test.awk Compress.hs

Compress.o : Compress.hs Extraction.o
	$(GHC) -c Compress.hs

Extraction.o : Extraction.hs
	$(GHC) -c Extraction.hs

Benchmarks: NoRBR ExpList DiffStack EffAlg2 Compress

bits : bits.cpp
	g++ -o bits bits.cpp `pkg-config --cflags --libs zlib`

.PHONY: Benchmarks NoRBR $(NORBR) ExpList $(EXPLIST) DiffStack $(DIFFSTACK) clean Compress $(COMPRESS) $(C)
